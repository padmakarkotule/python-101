{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about_gslab/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Contact"},{"location":"about_gslab/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"about_gslab/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"about_gslab/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"automation_readme/","text":"GS Lab - IDM Cloud Automation GSLab IDM Cloud Automation Services provide an orchestration and automation platform with enterprise-ready IaaS and PaaS services to provision VM and installation of tools/components. Automation tools considered for this document - Ansible. For full documentation of ansible visit - Ansible Documentation \"Software components/tools automation using ansible used during provision/de-provision VMs in datacenter. Note: Here, contact and license information has given as sample values.\" Version - 0.1 TermsOfService: Contact: IDM Clould automation team - Website Email License: name: \"Component license information\" url: \"https://<component - license >/license_info\" Servers: url Description http://ansible:5001/ Ansible Controller Server http://vCenter:5002/ vCenter servers (End point) / Public Cloud (E.g. AWS, Google Cloud) Security: - url: \"http://ansibleVault:5001/\" Description: \"Ansible Vault Server (End point)\" - url: \"http://hashicorp vault:5002/\" Description: \"Hashicorp vault Server (End point)\" Tags: - name: Monitoring tools description: Example of monitoring tool - name: Backup Tool description: Example of backup tool ExternalDocs: Description: Tools/Component Documentation url: https://<component-docs>/ Example, https://dev.mysql.com/doc/ Components (Open Source )- Table of contents Httpd MySql Messanging Queue Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Some more Examples","title":"Home"},{"location":"automation_readme/#gs-lab-idm-cloud-automation","text":"GSLab IDM Cloud Automation Services provide an orchestration and automation platform with enterprise-ready IaaS and PaaS services to provision VM and installation of tools/components. Automation tools considered for this document - Ansible. For full documentation of ansible visit - Ansible Documentation \"Software components/tools automation using ansible used during provision/de-provision VMs in datacenter. Note: Here, contact and license information has given as sample values.\"","title":"GS Lab - IDM Cloud Automation"},{"location":"automation_readme/#version-01","text":"TermsOfService:","title":"Version - 0.1"},{"location":"automation_readme/#contact","text":"IDM Clould automation team - Website Email","title":"Contact:"},{"location":"automation_readme/#license","text":"name: \"Component license information\" url: \"https://<component - license >/license_info\"","title":"License:"},{"location":"automation_readme/#servers","text":"url Description http://ansible:5001/ Ansible Controller Server http://vCenter:5002/ vCenter servers (End point) / Public Cloud (E.g. AWS, Google Cloud)","title":"Servers:"},{"location":"automation_readme/#security","text":"- url: \"http://ansibleVault:5001/\" Description: \"Ansible Vault Server (End point)\" - url: \"http://hashicorp vault:5002/\" Description: \"Hashicorp vault Server (End point)\"","title":"Security:"},{"location":"automation_readme/#tags","text":"- name: Monitoring tools description: Example of monitoring tool - name: Backup Tool description: Example of backup tool","title":"Tags:"},{"location":"automation_readme/#externaldocs","text":"Description: Tools/Component Documentation url: https://<component-docs>/ Example, https://dev.mysql.com/doc/","title":"ExternalDocs:"},{"location":"automation_readme/#components-open-source-table-of-contents","text":"Httpd MySql Messanging Queue Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Some more Examples","title":"Components (Open Source )- Table of contents"},{"location":"markdown_readme/","text":"Markdown Cheatsheet / Examples Introduction Markdown is a text-to-HTML conversion tool for web writers. Quick reference and showcase to write Markdown page. For moew details pl. visit, Ref. Link - https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links ``` \"Github\" - https://daringfireball.net/projects/markdown/ \"Basic writing and formatting syntax.\" - https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax \"Other Markdown tools:\" - https://github.com/adam-p/markdown-here/wiki/Other-Markdown-Tools ``` Table of contents Headers Emphasis Ordered list Unordered list Lists Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Some more Examples Headers This is test of H1. H1 H2 H3 H4 H5 H6 Alternatively, for H1 and H2, an underline-ish style: E.g. H1 using == ======== and H2 using using --- Use === for H1 and use --- for H2. Emphasis italics - with asterisks or underscores . bold - with asterisks or underscores . Combined - emphasis with asterisks and underscores . Strikethrough - uses two tildes ~~Scratch this~~ Lists (In this example, leading and trailing spaces are shown with with dots: \u22c5) Ordered list First ordered list item Another item Unordered list Unordered sub-list. Actual numbers don't matter, just that it's a number. Ordered sub-list. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses Links There are two ways to create links. I'm an inline-style link I'm an inline-style link with title I'm a reference-style link I'm a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. Images Here's our logo (hover to see the title text): Inline-style: Reference-style: Code and Syntax Highlighting Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page. Inline `code` has `back-ticks around` it. Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting. var s = \"JavaScript syntax highlighting\"; alert(s); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting. But let's throw in a <b>tag</b>. var s = \"JavaScript syntax highlighting\"; alert(s); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let's throw in a <b>tag</b>. Tables Tables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. Tables Are Cool Col 3 is the example of table in markdown. right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3 Blockquotes Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Inline HTML You can also use raw HTML in your Markdown, and it'll mostly work pretty well. Definition list Is something people use sometimes. Markdown in HTML Does not work very well. Use HTML tags . Horizontal Rule Three or more Hypenes, Asterisks or Underscores. E.g. Hyphens Asterisks Underscores Line Breaks My basic recommendation for learning how line breaks work is to experiment and discover -- hit once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend. Here are some things to try out: Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph . YouTube Videos They can't be added directly but you can add an image with a link to the video like this: Or, in pure Markdown, but losing the image sizing and border: Referencing a bug by #bugID in your git commit links it to the slip. For example #1. Some more Examples Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Test page mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Markdown Cheatsheet / Examples"},{"location":"markdown_readme/#markdown-cheatsheet-examples","text":"","title":"Markdown Cheatsheet / Examples"},{"location":"markdown_readme/#introduction","text":"Markdown is a text-to-HTML conversion tool for web writers. Quick reference and showcase to write Markdown page. For moew details pl. visit, Ref. Link - https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links ``` \"Github\" - https://daringfireball.net/projects/markdown/ \"Basic writing and formatting syntax.\" - https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax \"Other Markdown tools:\" - https://github.com/adam-p/markdown-here/wiki/Other-Markdown-Tools ```","title":"Introduction"},{"location":"markdown_readme/#table-of-contents","text":"Headers Emphasis Ordered list Unordered list Lists Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Some more Examples","title":"Table of contents"},{"location":"markdown_readme/#headers","text":"This is test of H1.","title":"Headers"},{"location":"markdown_readme/#h1","text":"","title":"H1"},{"location":"markdown_readme/#h2","text":"","title":"H2"},{"location":"markdown_readme/#h3","text":"","title":"H3"},{"location":"markdown_readme/#h4","text":"","title":"H4"},{"location":"markdown_readme/#h5","text":"","title":"H5"},{"location":"markdown_readme/#h6","text":"Alternatively, for H1 and H2, an underline-ish style: E.g. H1 using == ======== and H2 using using --- Use === for H1 and use --- for H2.","title":"H6"},{"location":"markdown_readme/#emphasis","text":"italics - with asterisks or underscores . bold - with asterisks or underscores . Combined - emphasis with asterisks and underscores . Strikethrough - uses two tildes ~~Scratch this~~","title":"Emphasis "},{"location":"markdown_readme/#lists","text":"(In this example, leading and trailing spaces are shown with with dots: \u22c5)","title":"Lists "},{"location":"markdown_readme/#ordered-list","text":"First ordered list item Another item","title":"Ordered list "},{"location":"markdown_readme/#unordered-list","text":"Unordered sub-list.","title":"Unordered list "},{"location":"markdown_readme/#links","text":"There are two ways to create links. I'm an inline-style link I'm an inline-style link with title I'm a reference-style link I'm a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later.","title":"Links "},{"location":"markdown_readme/#images","text":"Here's our logo (hover to see the title text): Inline-style: Reference-style:","title":"Images "},{"location":"markdown_readme/#code-and-syntax-highlighting","text":"Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page. Inline `code` has `back-ticks around` it. Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting. var s = \"JavaScript syntax highlighting\"; alert(s); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting. But let's throw in a <b>tag</b>. var s = \"JavaScript syntax highlighting\"; alert(s); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let's throw in a <b>tag</b>.","title":"Code and Syntax Highlighting "},{"location":"markdown_readme/#tables","text":"Tables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. Tables Are Cool Col 3 is the example of table in markdown. right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3","title":"Tables "},{"location":"markdown_readme/#blockquotes","text":"Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.","title":"Blockquotes "},{"location":"markdown_readme/#inline-html","text":"You can also use raw HTML in your Markdown, and it'll mostly work pretty well. Definition list Is something people use sometimes. Markdown in HTML Does not work very well. Use HTML tags .","title":"Inline HTML "},{"location":"markdown_readme/#horizontal-rule","text":"Three or more Hypenes, Asterisks or Underscores. E.g. Hyphens Asterisks Underscores","title":"Horizontal Rule "},{"location":"markdown_readme/#line-breaks","text":"My basic recommendation for learning how line breaks work is to experiment and discover -- hit once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend. Here are some things to try out: Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph .","title":"Line Breaks "},{"location":"markdown_readme/#youtube-videos","text":"They can't be added directly but you can add an image with a link to the video like this: Or, in pure Markdown, but losing the image sizing and border: Referencing a bug by #bugID in your git commit links it to the slip. For example #1.","title":"YouTube Videos "},{"location":"markdown_readme/#some-more-examples","text":"","title":"Some more Examples "},{"location":"markdown_readme/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"markdown_readme/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"markdown_readme/#test-page","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Test page"},{"location":"roles/httpd_README/","text":"Role - httpd This is ansible httpd role. The roles variables, tasks, files, and handlers that are stored in following structure. roles/httpd/ |-- README.md |-- defaults | `-- main.yml |-- files |-- handlers | `-- main.yml |-- meta | `-- main.yml |-- tasks | `-- main.yml |-- templates |-- tests | |-- inventory | `-- test.yml `-- vars `-- main.yml Note: Sample value provided for contact and license information.\" Version - 2.4.41 TermsOfService: Contact: IDM Clould automation team - Website Email License: name: \"Component license information\" url: \"https://<component - license >/license_info\" Servers: url Description http://ansible:5001/ Ansible Controller Server http://vCenter:5002/ vCenter servers (End point) / Public Cloud (E.g. AWS, Google Cloud) Security: url Description http://ansibleVault:5001/ Ansible Vault Server (End point) http://hashicorp vault:5002/ Hashicorp vault Server (End point) Tags: - name: Web server description: Web server ExternalDocs: url Description https:// <component-docs>/ < Tools/Component> Documentation E.g. https://httpd.apache.org/ Paths and Variables roles/httpd/defaults/main.yml Summary: Default attributes used for this component. Description: In this file use variables related only of this component and not generic such as repo server, temp dir, etc. Variables: Variable name and it's value. httpd_listen_port: 80 schema: type: int version: version: \"2.4.41\" schema: type: string roles/httpd/vars/main.yml Summary: The variables defined in this directory are meant for role internal use only. Description: It is a good idea to namespace your role variable names, to prevent potential naming conflicts with variables outside of your role. For example, if you needed a variable named config_file in your baseline playbook, you may want to name your variable baseline_config_file, to avoid conflicts with another possible config_file variable defined elsewhere. Variables: (Variable name and it's values) Temp dir: temp_dir: \"/tmp/gsl/\" Schema: type: string Software Repo path: repo_path: \"http://reposerver/downlods/httpd\" Schema: type: string Installation directory: install_dir: \"/opt/httpd\" Schema: type: string Log directory: log_dir: \"./logs/ansible.log\" Schema: type: string Archive name: archive_name: \"NA\" Schema: type: string Fixpack name: fix_pack: \"NA\" Schema: type: string expand area: expand_area: \"NA\" Schema: type: string group_vars/all.yml Summary: Variables listed here are applicable to all host groups. Description: In this file use variables which are applicable to all host groups. E.g. ntp server, dnsserver etc. Variables: NTP Server: ntpserver: 192.168.1.2 Schema: type: string DNS Server: dnsserver: 192.168.1.1 Schema: type: string Git repo: repository: https://github.com/playbooks.git extra_vars.json Summary: Passing variables on the command line. Description: In addition to vars_prompt and vars_files, it is possible to set variables at the command line using the --extra-vars (or -e) argument. Variables can be defined using a single quoted string (containing one or more variables) using one of the formats below. Example, ansible-playbook httpd.yml --extra-vars \"version=2.4.1 other_variable=foo\" Note: Values passed in using the key=value syntax are interpreted as strings. Use the JSON format if you need to pass in anything that shouldn\u2019t be a string (Booleans, integers, floats, lists etc). Using json/yml format ansible-playbook release.yml --extra-vars '{\"version\":\"1.23.45\",\"other_variable\":\"foo\"}' ansible-playbook arcade.yml --extra-vars '{\"pacman\":\"mrs\",\"ghosts\":[\"inky\",\"pinky\",\"clyde\",\"sue\"]}' vars from a JSON or YAML file: ansible-playbook release.yml --extra-vars \"@extra_var.json\" E.g. of extra_var.json { \"ansible_sudo_pass\":ansible123, \"mysql_install_dir\":\"/opt/httpd_in_exta_var\" } Variables: Sudo Password: ansible_sudo_pass: ansible123, Schema: type: string Httpd Install dir E.g.: httpd_install_dir: \"/opt/httpd\" Schema: type: string Git repo: repository: https://github.com/playbooks.git Files and Templates roles/httpd/templates Summary: Fles for use with the copy resource amd script files for use with the script resource. Description: The copy module copies a file from the local or remote machine to a location on the remote machine. If you need variable interpolation in copied files, use the template module. Using a variable in the content field will result in unpredictable output. For Windows targets, use the win_copy module instead. Ansible does not need a path for resources stored in them when working in the role. Ansible checks them first. You may still use the full path if you want to reference files outside of the role, however, best practices suggest that you keep all of the role components together. files: Create a file named index.html containing some sample text. Example, $cat >index.html Hello Word! $ cat index.html Hello Word! templates: create a template of our httpd.conf file by copying an existing one from a fresh install of httpd. Define a couple of default variables in our role and replace it in template using variable name. E.g. E.g. We will do a default listening port of 80 and a LogLevel that will default to warn. We can do this by adding an entry to defaults/main.yml: Example, $cat defaults/main.yml --- # defaults file for roles/httpd httpd_listen_port: 80 httpd_log_level: war Create template file, E.g.: $ cd templates $ cat >httpd.conf.j2 listen \"{{ httpd_listen_port }}\" loglevel \"{{ httpd_log_level }}\" Note: template file has the .j2 extension. Handlers roles/httpd/handlers Summary: Contains handlers, which may be used by this role or even anywhere outside this role Description: Ansible handlers are simply tasks that may be flagged during a play to run at the play\u2019s completion. Example: Create the handler for the Restart HTTPd in \"roles/httpd/handlers/main.yml\" with the following content, --- - name: Restart HTTPd service: name: httpd state: restarted become: True and in task, you can specify notify e.g. tasks: --- - name: Restart HTTPd command: echo \"this task will restart the web services\" notify: \"Restart HTTPd\" Tasks roles/httpd/files Summary: Ansible Tasks. Descripton: Create Tasks for role as per documentation. README.md Role name: httpd Instructions for use: Running the playbook: Usage - Clean up Delete any empty/unused boilerplate folders and YAML files. rename readme.md to README.md (Ansible Galaxy requires the filename to be uppercase.) META |-- meta | `-- main.yml Summary: When Galaxy imports a role, the import process looks for metadata found in the role\u2019s meta/main.yml file. Description: Role dependencies allow you to automatically pull in other roles when using a role. Role dependencies are stored in the meta/main.yml file contained within the role directory. Update meta/main.yml file: Example, galaxy_info: author: GSL Team description: httpd playbook company: GS Lab license: license (GPL-2.0-or-later, MIT, etc) min_ansible_version: 2.4 galaxy_tags: [] dependencies: []","title":"Httpd"},{"location":"roles/httpd_README/#role-httpd","text":"This is ansible httpd role. The roles variables, tasks, files, and handlers that are stored in following structure. roles/httpd/ |-- README.md |-- defaults | `-- main.yml |-- files |-- handlers | `-- main.yml |-- meta | `-- main.yml |-- tasks | `-- main.yml |-- templates |-- tests | |-- inventory | `-- test.yml `-- vars `-- main.yml Note: Sample value provided for contact and license information.\"","title":"Role - httpd"},{"location":"roles/httpd_README/#version-2441","text":"TermsOfService:","title":" Version - 2.4.41"},{"location":"roles/httpd_README/#contact","text":"IDM Clould automation team - Website Email","title":"Contact:"},{"location":"roles/httpd_README/#license","text":"name: \"Component license information\" url: \"https://<component - license >/license_info\"","title":"License:"},{"location":"roles/httpd_README/#servers","text":"url Description http://ansible:5001/ Ansible Controller Server http://vCenter:5002/ vCenter servers (End point) / Public Cloud (E.g. AWS, Google Cloud)","title":"Servers:"},{"location":"roles/httpd_README/#security","text":"url Description http://ansibleVault:5001/ Ansible Vault Server (End point) http://hashicorp vault:5002/ Hashicorp vault Server (End point)","title":"Security:"},{"location":"roles/httpd_README/#tags","text":"- name: Web server description: Web server","title":"Tags:"},{"location":"roles/httpd_README/#externaldocs","text":"url Description https:// <component-docs>/ < Tools/Component> Documentation E.g. https://httpd.apache.org/","title":"ExternalDocs:"},{"location":"roles/httpd_README/#paths-and-variables","text":"roles/httpd/defaults/main.yml Summary: Default attributes used for this component. Description: In this file use variables related only of this component and not generic such as repo server, temp dir, etc. Variables: Variable name and it's value. httpd_listen_port: 80 schema: type: int version: version: \"2.4.41\" schema: type: string roles/httpd/vars/main.yml Summary: The variables defined in this directory are meant for role internal use only. Description: It is a good idea to namespace your role variable names, to prevent potential naming conflicts with variables outside of your role. For example, if you needed a variable named config_file in your baseline playbook, you may want to name your variable baseline_config_file, to avoid conflicts with another possible config_file variable defined elsewhere. Variables: (Variable name and it's values) Temp dir: temp_dir: \"/tmp/gsl/\" Schema: type: string Software Repo path: repo_path: \"http://reposerver/downlods/httpd\" Schema: type: string Installation directory: install_dir: \"/opt/httpd\" Schema: type: string Log directory: log_dir: \"./logs/ansible.log\" Schema: type: string Archive name: archive_name: \"NA\" Schema: type: string Fixpack name: fix_pack: \"NA\" Schema: type: string expand area: expand_area: \"NA\" Schema: type: string group_vars/all.yml Summary: Variables listed here are applicable to all host groups. Description: In this file use variables which are applicable to all host groups. E.g. ntp server, dnsserver etc. Variables: NTP Server: ntpserver: 192.168.1.2 Schema: type: string DNS Server: dnsserver: 192.168.1.1 Schema: type: string Git repo: repository: https://github.com/playbooks.git extra_vars.json Summary: Passing variables on the command line. Description: In addition to vars_prompt and vars_files, it is possible to set variables at the command line using the --extra-vars (or -e) argument. Variables can be defined using a single quoted string (containing one or more variables) using one of the formats below. Example, ansible-playbook httpd.yml --extra-vars \"version=2.4.1 other_variable=foo\" Note: Values passed in using the key=value syntax are interpreted as strings. Use the JSON format if you need to pass in anything that shouldn\u2019t be a string (Booleans, integers, floats, lists etc). Using json/yml format ansible-playbook release.yml --extra-vars '{\"version\":\"1.23.45\",\"other_variable\":\"foo\"}' ansible-playbook arcade.yml --extra-vars '{\"pacman\":\"mrs\",\"ghosts\":[\"inky\",\"pinky\",\"clyde\",\"sue\"]}' vars from a JSON or YAML file: ansible-playbook release.yml --extra-vars \"@extra_var.json\" E.g. of extra_var.json { \"ansible_sudo_pass\":ansible123, \"mysql_install_dir\":\"/opt/httpd_in_exta_var\" } Variables: Sudo Password: ansible_sudo_pass: ansible123, Schema: type: string Httpd Install dir E.g.: httpd_install_dir: \"/opt/httpd\" Schema: type: string Git repo: repository: https://github.com/playbooks.git","title":"Paths and Variables"},{"location":"roles/httpd_README/#files-and-templates","text":"roles/httpd/templates Summary: Fles for use with the copy resource amd script files for use with the script resource. Description: The copy module copies a file from the local or remote machine to a location on the remote machine. If you need variable interpolation in copied files, use the template module. Using a variable in the content field will result in unpredictable output. For Windows targets, use the win_copy module instead. Ansible does not need a path for resources stored in them when working in the role. Ansible checks them first. You may still use the full path if you want to reference files outside of the role, however, best practices suggest that you keep all of the role components together. files: Create a file named index.html containing some sample text. Example, $cat >index.html Hello Word! $ cat index.html Hello Word! templates: create a template of our httpd.conf file by copying an existing one from a fresh install of httpd. Define a couple of default variables in our role and replace it in template using variable name. E.g. E.g. We will do a default listening port of 80 and a LogLevel that will default to warn. We can do this by adding an entry to defaults/main.yml: Example, $cat defaults/main.yml --- # defaults file for roles/httpd httpd_listen_port: 80 httpd_log_level: war Create template file, E.g.: $ cd templates $ cat >httpd.conf.j2 listen \"{{ httpd_listen_port }}\" loglevel \"{{ httpd_log_level }}\" Note: template file has the .j2 extension.","title":"Files and Templates"},{"location":"roles/httpd_README/#handlers","text":"roles/httpd/handlers Summary: Contains handlers, which may be used by this role or even anywhere outside this role Description: Ansible handlers are simply tasks that may be flagged during a play to run at the play\u2019s completion. Example: Create the handler for the Restart HTTPd in \"roles/httpd/handlers/main.yml\" with the following content, --- - name: Restart HTTPd service: name: httpd state: restarted become: True and in task, you can specify notify e.g. tasks: --- - name: Restart HTTPd command: echo \"this task will restart the web services\" notify: \"Restart HTTPd\"","title":"Handlers"},{"location":"roles/httpd_README/#tasks","text":"roles/httpd/files Summary: Ansible Tasks. Descripton: Create Tasks for role as per documentation.","title":"Tasks"},{"location":"roles/httpd_README/#readmemd","text":"","title":"README.md"},{"location":"roles/httpd_README/#role-name-httpd","text":"Instructions for use:","title":"Role name: httpd "},{"location":"roles/httpd_README/#running-the-playbook","text":"Usage -","title":"Running the playbook:"},{"location":"roles/httpd_README/#clean-up","text":"Delete any empty/unused boilerplate folders and YAML files. rename readme.md to README.md (Ansible Galaxy requires the filename to be uppercase.)","title":"Clean up"},{"location":"roles/httpd_README/#meta","text":"|-- meta | `-- main.yml Summary: When Galaxy imports a role, the import process looks for metadata found in the role\u2019s meta/main.yml file. Description: Role dependencies allow you to automatically pull in other roles when using a role. Role dependencies are stored in the meta/main.yml file contained within the role directory. Update meta/main.yml file: Example, galaxy_info: author: GSL Team description: httpd playbook company: GS Lab license: license (GPL-2.0-or-later, MIT, etc) min_ansible_version: 2.4 galaxy_tags: [] dependencies: []","title":"META"}]}