
Role - Mysql role.
**Note** Replace <comp> with actual role/component name.

The roles variables, tasks, files, handlers, etc. ate stored in following directory structure format.

    root(ansible home folder)
        | -- inventory_hosts
        | -- ansible.cfg
        | -- extra_var.json
        | -- pattern_IaaS.yml
        | -- pattern_PaaS.yml

        group_vars
        | -- all.yml

        logs
        | --ansible.log

        | --gather_evidance

        **roles/<comp>/**
        |-- README.md
        |-- defaults
        |   -- main.yml
        |-- files
        |-- handlers
        |   -- main.yml
        |-- meta
        |   -- main.yml
        |-- tasks
        |   -- main.yml
        |-- templates
        |-- tests
        |   |-- inventory
        |   -- test.yml
        `-- vars
            -- main.yml

#### Component Version -

#### Component License:
>
      name: "Component license information"
      url: "https://<component - license >/license_info"

#### Component Security:
**Note** Will keep all security related information of particular component in security section.
E.g. under this section Service user password will be stored of
ansible vault or Hashicorp vault or any third part vault system. *(If applicable)*

| url        | Description   |
| ---------- |:-------------:|
http://ansibleVault:5001/ | Ansible Vault Server (End point)
Or
http://hashicorp vault:5002/ | Hashicorp vault Server (End point)
OR
(Thrid pary vault)

#### Tags:
      - name: <  > server
        description: < > server

#### ExternalDocs:
| url        | Description   |
| ---------- |:-------------:|
https:// component-docs/     | Tools/Component Documentation
E.g. https://<comp>.org/

## Paths and Variables
<dl>
    <dt> roles//<comp>faults/main.yml </dt>
        <dd>
            Summary:<p>
            Default attributes used for this component. </p>
            Description:<p>
            In this file use variables related only of <br>
            this component and not generic such as repo server, temp dir, etc.</p>
        </dd>
        **Variables:**
        <dd>
            <p>
            Variable name and it's value. <br>
            ```<var1>: <Value>``` <br>
            schema:<br>
            ```type: <E.g. int?```<br>
            version: <br>
            ```version: "<Comp. ver>"```<br>
            schema:<br>
            ```type: string```<br>
            </p>
        </dd>
</dl>
<dl>
    <dt> roles/<comp>vars/main.yml </dt>
        <dd>
            Summary:<p>
            The variables defined in this directory are meant for role internal use only. </p>
            Note:- For this component, there is no internal variable. All common variables are stored in
            common role such as temp_dir, log dir etc.
            Following are the few example of internal variables will be stored in common role.
            <p>
            Temp dir: <br>
            ```temp_dir: "/tmp/gsl/"``` <br>
            Schema:<br>
            ```type: string```<br>
            Software Repo path: <br>
            ```repo_path: "http://reposerver/binaries/<windows or linux>/<application>/<version>/"```<br>
            Schema:<br>
            ```type: string```</br>
            Installation directory: <br>
            ```install_dir: "/<applicaton installion path>"```<br>
            Schema:<br>
            ```type: string```<br>
            Log directory: <br>
            ```log_dir: "/var/log/gsl/<application>/<app_name>.log"```<br>
            Schema:<br>
            ```type: string```<br>
            Archive name: <br>
            ```archive_name: "appname_<version>.ext"```<br>
            Schema:<br>
            ```type: string```<br>
            Fixpack name: <br>
            ```fix_pack: "NA"```<br>
            Schema:<br>
            ```type: string```<br>
            expand area: <br>
            ```expand_area: "/tmp/gsl/artifacts/<application_name>/installers"```<br>
            Schema:<br>
            ```type: string```<br>
            </p>
        </dd>
</dl>
<dl>
    <dt> group_vars/all.yml </dt>
        <dd>
            Summary:<p>
            Variables listed here are applicable to all host groups. </p>
            Description:<p>
            In this file use variables which are applicable to all host groups.
            E.g. ntp server, dnsserver etc.</p>
        </dd>
        **Variables:**
        <dd>
            <p>
            NTP Server:<br>
            ```ntpserver: 192.168.1.2``` <br>
            Schema:<br>
            ```type: string```<br>
            DNS Server:<br>
            ```dnsserver: 192.168.1.1``` <br>
            Schema:<br>
            ```type: string```<br>
            Git repo: <br>
            ```repository: https://github.com/playbooks.git```<br>
            </p>
        </dd>
</dl>
<dl>
    <dt> extra_vars.json </dt>
        <dd>
            Summary:<p>
            Passing variables on the command line. </p>
            Description:<p>
            In addition to vars_prompt and vars_files, it is possible to
            set variables at the command line using the --extra-vars (or -e) argument.
            Variables can be defined using a single quoted string
            (containing one or more variables) using one of the formats below.
            Example,
            ansible-playbook <comp>.yml --extra-vars "version=2.4.1 other_variable=foo"
            **Note:** Values passed in using the key=value syntax are interpreted as
            strings. Use the JSON format if you need to pass in anything that shouldn’t
            be a string (Booleans, integers, floats, lists etc).
            Using json/yml format
            ansible-playbook release.yml --extra-vars '{"version":"1.23.45","other_variable":"foo"}'
            ansible-playbook arcade.yml --extra-vars '{"pacman":"mrs","ghosts":["inky","pinky","clyde","sue"]}'
            **vars from a JSON or YAML file:**
            ansible-playbook release.yml --extra-vars "@extra_var.json"
            E.g. of extra_var.json
            {
                "ansible_sudo_pass":ansible123,
                "<comp>_install_dir":"/opt/<comp<_in_exta_var"
            }
            </p>
        </dd>
        **Variables:**
        <dd>
            <p>
            Sudo Password:<br>
            ```ansible_sudo_pass: " ",``` <br>
            Schema:<br>
            ```type: string```<br>
            <comp> Install dir E.g.:<br>
            ```<comp>_install_dir: "/opt/<comp>"``` <br>
            Schema:<br>
            ```type: string```<br>
            Git repo: <br>
            ```repository: https://github.com/playbooks.git```<br>
            </p>
        </dd>
</dl>

## Files and Templates
<dl>
    <dt> roles/<comp>/templates </dt>
        <dd>
            Summary:<p>
            To copy files use with the copy resource and for script files use script resource. </p>
            Description:<p>
            The copy module copies a file from the local or remote machine to a destination location.
            If you need variable interpolation in copied files, use the template
            module. Using a variable in the content field will result in unpredictable output.
            For Windows targets, use the win_copy module instead.<br>
            ***Ansible does not need a path for resources stored in them when working in the role.
            Ansible checks them first. You may still use the full path if you want to reference
            files outside of the role, however, best practices suggest that you keep all of
            the role components together.***<br>
            </p>
        </dd>
        **files:**
        <dd>
            <p>
              Create/keep component specific files here.
              Example,<br>
              ```$cat >config.ini```<br>
            </p>
        </dd>
        **templates:**
        <dd>
            <p>
              create a template of config file **by copying an existing
              one from a fresh install of it.**<br>
              Define a couple of default variables in our role and replace it in
              template using variable name. E.g.
              E.g. We will do a default listening port of 80 and a LogLevel that
              will default to warn. We can do this by adding an entry to defaults/main.yml:
              Example,<br>
              ```$cat defaults/main.yml```<br>
              ---<br>
              # defaults file for roles/<comp><br>
                <comp>_listen_port: 80<br>
                <comp>_log_level: war<br>
              **Create template file, E.g.:**<br>
              ```$ cd templates```<br>
              ```$ cat ><comp>.conf.j2```<br>
                   listen "{{ <comp>_listen_port }}"<br>
                   loglevel "{{ <comp>_log_level }}"<br>
              **Note:** template file has the .j2 extension. <br>
            </p>
        </dd>
</dl>

## Handlers
<dl>
    <dt> roles/<comp>/handlers  </dt>
        <dd>
            <p>
            Summary: Contains handlers, which may be used by this role or even anywhere outside this role </p>
            Description: <p>
            Ansible handlers are simply tasks that may be flagged during a
            play to run at the play’s completion.</p>
            Example:<p>
            Create the handler for the Restart <Comp>
            ***in "roles/<comp>/handlers/main.yml"***
            with the following content,<br>
            ```---```<br>
            ```- name: Restart <Comp>```<br>
                ```service:```<br>
                ```name: <comp>``` <br>
                ```state: restarted``` <br>
                ```become: True``` <br>
            and in task, you can specify notify e.g. <br>
            tasks:<br>
            ```---```<br>
            ```- name: Restart <comp>```<br>
                 ```command: echo "this task will restart the web services"```<br>
                 ```notify: "Restart <comp>"```<br>
             </p>
        </dd>
</dl>

## Tasks
<dl>
    <dt> roles/<comp>/files </dt>
        <dd>
            <p>
            Summary: Ansible Tasks. </p>
            Descripton:<p>
            Create Tasks for <tool/component> role as per <tool/component> documentation.</p>
            E.g.
            - name: Install <Comp>
              yum: name=<comp> state=latest
        </dd>
</dl>

## README.md

###### Role name: <Comp> <br>
Instructions for use of the component.

###### Running the playbook:
Usage - Example

###### Gather evidance
Provide gather evidance location e.g. gather_evidance/gather_evidance.log

######Clean up<br>
- Delete any empty/unused boilerplate folders and YAML files.<br>
- rename readme.md to README.md (Ansible Galaxy requires the filename to be uppercase.)

## META
        |-- meta
        |   `-- main.yml

<p>
    Summary:<p>
        When Galaxy imports a role, the import process looks for
        metadata found in the role’s meta/main.yml file. </p>
    Description:<p>
        Role dependencies allow you to automatically pull in other roles
        when using a role. Role dependencies are stored in the meta/main.yml
        file contained within the role directory. </p>
    Update meta/main.yml file:<br>
    Example,<br>
    <p>
    galaxy_info:
        author: GSL Team<br>
        description: <comp> playbook
        company: GS Lab <br>
        license: license (GPL-2.0-or-later, MIT, etc)<br>
        min_ansible_version: 2.4 <br>
        galaxy_tags: []<br>
        dependencies: []<br>
    </p>

