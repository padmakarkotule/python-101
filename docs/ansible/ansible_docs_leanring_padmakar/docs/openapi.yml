openapi: "3.0.2"
info:
  title: "Components/tools automation using Ansible"
  description: "Software components/tools automation using ansible used during provision/de-provision VMs in datacenter. <br></br> **Note:** Here, contact and license information has given as sample values."
  version: "0.1"
  termsOfService: "http://components.com/terms/"
  contact:
    name: "IDM Clould automation team."
    url: "http://tools.website.com/contact"
    email: "componentowner@gslab.com"
  license:
    name: "Component license information"
    url: "https://tools.license.com/license_info"
servers:
  - url: "http://ansible:5001/"
    description: "Ansible Controller Server"
  - url: "http://vCenter:5002/"
    description: "vCenter server"
paths:
  /users:
    get:
      tags:
        - Users data
      summary: "Get the users data"
      description: "Will be return all users data"
      operationId: "UsersData"
      parameters:
      - name: "id"
        in: "query"
        description: "**City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by a comma; use ISO 3166 country codes."
        schema:
          type: "string"

      - name: "zip"
        in: query
        description: "State Zip code"
        schema:
          type: integer

      responses:
        200:
          description: "Successful respones"
          content:
            application/json:
              schema:
                title: Sample
                type: object
                properties:
                  placeholder:
                    type: string
                    description: "Get users data"
        404:
          description: Not found response
          content:
            application/json:
              schema:
                title: Weather not found
                type: string
                example: Not found
    post:
      tags:
        - Users data
      summary: "Create entry of user"
      description: "Add user entry"
      operationId: "CreateUsersData"
      parameters:
      - name: "First name"
        in: query
        schema:
          type: string

      - name: "Last name"
        in: query
        schema:
          type: string

      - name: "Email"
        in: query
        schema:
          type: string

      - name: "User Phone number"
        in: query
        schema:
          type: integer

      responses:
        201:
          description: "Successful respones"
          content:
            application/json:
              schema:
                title: User creation response
                type: object
                properties:
                  placeholder:
                    type: string
                    description: "User created"

        404:
          description: Not found response
          content:
            application/json:
              schema:
                title: Weather not found
                type: string
                example: Not found
/catalog:
    get:
        tags:
          - Catalog
        summary: "Get the users data"
        description: "Will be return all users data"
        operationId: "CatalogData"
        parameters:
          - name: "id"
            in: "query"
            schema:
              type: string

        responses:
          201:
            description: "Successful respones"
            content:
              application/json:
                schema:
                  title: User creation response
                  type: object
                  properties:
                    placeholder:
                      type: string
                      description: "User created"
